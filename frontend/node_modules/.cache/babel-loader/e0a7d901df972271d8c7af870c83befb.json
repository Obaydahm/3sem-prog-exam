{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\goo-x\\\\OneDrive\\\\Dokumenter\\\\NetBeansProjects\\\\3sem\\\\Programmeringseksamen\\\\Eksamen\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\goo-x\\\\OneDrive\\\\Dokumenter\\\\NetBeansProjects\\\\3sem\\\\Programmeringseksamen\\\\Eksamen\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\goo-x\\\\OneDrive\\\\Dokumenter\\\\NetBeansProjects\\\\3sem\\\\Programmeringseksamen\\\\Eksamen\\\\frontend\\\\src\\\\components\\\\Admin\\\\Movies\\\\AddMovie.js\";\nimport React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\nconst AddMovie = props => {\n  const _useState = useState({\n    \"title\": \"\",\n    \"year\": \"\",\n    \"directors\": [{}],\n    \"actors\": [{}],\n    \"genres\": [{}]\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        movie = _useState2[0],\n        setMovie = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const onChange = evt => {\n    const target = evt.target;\n\n    if (target.tagName === \"SELECT\" && target.id !== \"year\") {\n      const options = evt.target.options;\n      let selected = [];\n\n      for (let i = 0; i < options.length; i++) {\n        if (options[i].selected) {\n          selected.push({\n            \"name\": options[i].value\n          });\n        }\n      }\n\n      movie[target.id] = selected;\n      setMovie(_objectSpread({}, movie));\n    } else {\n      movie[target.id] = target.value;\n      setMovie(_objectSpread({}, movie));\n    }\n  };\n\n  const onClick = evt => {\n    evt.preventDefault();\n\n    if (movie.title === \"\" || movie.year === \"\" || movie.directors.length < 1 || movie.actors.length < 1 || movie.genres.length < 1) {\n      setError(\"You may not leave any fields empty!\");\n    }\n  };\n\n  return React.createElement(Form, {\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, error !== \"\" ? React.createElement(Alert, {\n    variant: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, error) : null, React.createElement(Form.Group, {\n    controlId: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"What is the title of the movie?\"), React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Eg. Bad Boys\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    controlId: \"year\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"What year was it/will it get published\"), React.createElement(Form.Control, {\n    as: \"select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Select a year\"), props.years.map((year, i) => React.createElement(\"option\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, year)))), React.createElement(Form.Group, {\n    controlId: \"directors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Choose the directors\"), React.createElement(Form.Control, {\n    as: \"select\",\n    multiple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, props.allDirectors.map((director, i) => React.createElement(\"option\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, director.name)))), React.createElement(Form.Group, {\n    controlId: \"actors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Choose the actors\"), React.createElement(Form.Control, {\n    as: \"select\",\n    multiple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, props.allActors.map((actor, i) => React.createElement(\"option\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, actor.name)))), React.createElement(Form.Group, {\n    controlId: \"genres\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Choose the genres\"), React.createElement(Form.Control, {\n    as: \"select\",\n    multiple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, props.allGenres.map((genre, i) => React.createElement(\"option\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, genre.name)))), React.createElement(Button, {\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Add movie\"));\n};\n\nexport default AddMovie;","map":{"version":3,"sources":["C:/Users/goo-x/OneDrive/Dokumenter/NetBeansProjects/3sem/Programmeringseksamen/Eksamen/frontend/src/components/Admin/Movies/AddMovie.js"],"names":["React","useState","useEffect","Form","Button","Alert","AddMovie","props","movie","setMovie","error","setError","onChange","evt","target","tagName","id","options","selected","i","length","push","value","onClick","preventDefault","title","year","directors","actors","genres","years","map","allDirectors","director","name","allActors","actor","allGenres","genre"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\n\r\nconst AddMovie = (props) => {\r\n  const [movie, setMovie] = useState({\r\n    \"title\": \"\",\r\n    \"year\": \"\",\r\n    \"directors\": [{}],\r\n    \"actors\": [{}],\r\n    \"genres\": [{}]\r\n  });\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = evt => {\r\n    const target = evt.target;\r\n    if (target.tagName === \"SELECT\" && target.id !== \"year\") {\r\n      const options = evt.target.options;\r\n      let selected = [];\r\n      for (let i = 0; i < options.length; i++) {\r\n        if (options[i].selected) {\r\n          selected.push({ \"name\": options[i].value })\r\n        }\r\n      }\r\n      movie[target.id] = selected;\r\n      setMovie({ ...movie })\r\n    } else {\r\n      movie[target.id] = target.value;\r\n      setMovie({ ...movie });\r\n    }\r\n  }\r\n\r\n  const onClick = evt => {\r\n    evt.preventDefault();\r\n    if (\r\n      movie.title === \"\" ||\r\n      movie.year === \"\" ||\r\n      movie.directors.length < 1 ||\r\n      movie.actors.length < 1 ||\r\n      movie.genres.length < 1\r\n    ) {\r\n      setError(\"You may not leave any fields empty!\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Form onChange={onChange}>\r\n\r\n      {\r\n        error !== \"\" ? (\r\n          <Alert variant=\"danger\">{error}</Alert>\r\n        ) : null\r\n      }\r\n\r\n      <Form.Group controlId=\"title\">\r\n        <Form.Label>What is the title of the movie?</Form.Label>\r\n        <Form.Control type=\"text\" placeholder=\"Eg. Bad Boys\" />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"year\">\r\n        <Form.Label>What year was it/will it get published</Form.Label>\r\n        <Form.Control as=\"select\">\r\n          <option>Select a year</option>\r\n          {\r\n            props.years.map((year, i) => (\r\n              <option key={i}>{year}</option>\r\n            ))\r\n          }\r\n        </Form.Control>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"directors\">\r\n        <Form.Label>Choose the directors</Form.Label>\r\n        <Form.Control as=\"select\" multiple>\r\n          {\r\n            props.allDirectors.map((director, i) => (\r\n              <option key={i}>{director.name}</option>\r\n            ))\r\n          }\r\n        </Form.Control>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"actors\">\r\n        <Form.Label>Choose the actors</Form.Label>\r\n        <Form.Control as=\"select\" multiple>\r\n          {\r\n            props.allActors.map((actor, i) => (\r\n              <option key={i}>{actor.name}</option>\r\n            ))\r\n          }\r\n        </Form.Control>\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"genres\">\r\n        <Form.Label>Choose the genres</Form.Label>\r\n        <Form.Control as=\"select\" multiple>\r\n          {\r\n            props.allGenres.map((genre, i) => (\r\n              <option key={i}>{genre.name}</option>\r\n            ))\r\n          }\r\n        </Form.Control>\r\n      </Form.Group>\r\n\r\n      <Button onClick={onClick}>Add movie</Button>\r\n\r\n\r\n\r\n\r\n    </Form>\r\n\r\n  );\r\n}\r\n\r\nexport default AddMovie;"]},"metadata":{},"sourceType":"module"}