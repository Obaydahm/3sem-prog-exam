{"ast":null,"code":"const URL = \"http://localhost:8080/eksamen/api/\";\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nclass ApiFacade {\n  constructor() {\n    this.roles = [0];\n\n    this.getRole = () => {\n      let jwtToken = localStorage.getItem(\"jwtToken\");\n\n      if (jwtToken !== null) {\n        let tokenData = jwtToken.split(\".\")[1];\n        let decodedData = window.atob(tokenData);\n        let dataJson = JSON.parse(decodedData);\n        return dataJson.roles;\n      }\n\n      return \"notloggedin\";\n    };\n\n    this.setToken = token => {\n      localStorage.setItem(\"jwtToken\", token);\n    };\n\n    this.getToken = () => {\n      return localStorage.getItem(\"jwtToken\");\n    };\n\n    this.loggedIn = () => {\n      const loggedIn = this.getToken() != null;\n      return loggedIn;\n    };\n\n    this.logout = () => {\n      localStorage.removeItem(\"jwtToken\");\n      this.roles = [0];\n    };\n\n    this.fetchData = () => {\n      const urlFetch = this.roles.includes(\"user\") ? \"/api/info/user\" : \"/api/info/admin\";\n      const options = this.makeOptions(\"GET\", true); //True add's the token\n\n      return fetch(URL + urlFetch, options).then(handleHttpErrors);\n    };\n\n    this.login = (user, pass) => {\n      const options = this.makeOptions(\"POST\", true, {\n        username: user,\n        password: pass\n      });\n      return fetch(URL + \"login\", options).then(handleHttpErrors).then(res => {\n        this.setToken(res.token);\n        this.roles = res.roles;\n      });\n    };\n\n    this.fetchMovies = async search => {\n      const options = this.makeOptions(\"GET\", false); //True add's the token\n\n      const res = await fetch(URL + `movie/${search.searchBy}/${search.query}`, options);\n      return handleHttpErrors(res);\n    };\n\n    this.getCategoryCount = async search => {\n      const options = this.makeOptions(\"GET\", true); //True add's the token\n\n      const res = await fetch(URL + `categoryCount/${search}`, options);\n      return handleHttpErrors(res);\n    };\n  }\n\n  makeOptions(method, addToken, body) {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n\n    if (addToken && this.loggedIn()) {\n      opts.headers[\"x-access-token\"] = this.getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  }\n\n}\n\nconst facade = new ApiFacade();\nexport default facade;","map":{"version":3,"sources":["C:/Users/goo-x/OneDrive/Dokumenter/NetBeansProjects/3sem/Programmeringseksamen/Eksamen/frontend/src/apiFacade.js"],"names":["URL","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","ApiFacade","roles","getRole","jwtToken","localStorage","getItem","tokenData","split","decodedData","window","atob","dataJson","JSON","parse","setToken","token","setItem","getToken","loggedIn","logout","removeItem","fetchData","urlFetch","includes","options","makeOptions","fetch","then","login","user","pass","username","password","fetchMovies","search","searchBy","query","getCategoryCount","method","addToken","body","opts","headers","Accept","stringify","facade"],"mappings":"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","sourcesContent":["const URL = \"http://localhost:8080/eksamen/api/\";\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({ status: res.status, fullError: res.json() });\n  }\n  return res.json();\n}\n\nclass ApiFacade {\n\n  roles = [0];\n\n  getRole = () => {\n    let jwtToken = localStorage.getItem(\"jwtToken\");\n    if (jwtToken !== null) {\n      let tokenData = jwtToken.split(\".\")[1];\n      let decodedData = window.atob(tokenData);\n      let dataJson = JSON.parse(decodedData);\n      return dataJson.roles;\n    }\n    return \"notloggedin\";\n  };\n\n  setToken = token => {\n    localStorage.setItem(\"jwtToken\", token);\n  };\n  getToken = () => {\n    return localStorage.getItem(\"jwtToken\");\n  };\n  loggedIn = () => {\n    const loggedIn = this.getToken() != null;\n    return loggedIn;\n  };\n  logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n    this.roles = [0];\n  };\n\n  makeOptions(method, addToken, body) {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n    if (addToken && this.loggedIn()) {\n      opts.headers[\"x-access-token\"] = this.getToken();\n    }\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n    return opts;\n  }\n\n  fetchData = () => {\n    const urlFetch = (this.roles.includes(\"user\") ? \"/api/info/user\" : \"/api/info/admin\");\n    const options = this.makeOptions(\"GET\", true); //True add's the token\n    return fetch(URL + urlFetch, options).then(handleHttpErrors);\n  };\n\n  login = (user, pass) => {\n    const options = this.makeOptions(\"POST\", true, {\n      username: user,\n      password: pass\n    });\n\n    return fetch(URL + \"login\", options)\n      .then(handleHttpErrors)\n      .then(res => {\n        this.setToken(res.token);\n        this.roles = res.roles;\n      });\n  };\n\n  fetchMovies = async (search) => {\n    const options = this.makeOptions(\"GET\", false); //True add's the token\n    const res = await fetch(URL + `movie/${search.searchBy}/${search.query}`, options);\n    return handleHttpErrors(res);\n  }\n\n  getCategoryCount = async (search) => {\n    const options = this.makeOptions(\"GET\", true); //True add's the token\n    const res = await fetch(URL + `categoryCount/${search}`, options);\n    return handleHttpErrors(res);\n  }\n}\nconst facade = new ApiFacade();\nexport default facade;\n"]},"metadata":{},"sourceType":"module"}