{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\goo-x\\\\OneDrive\\\\Dokumenter\\\\NetBeansProjects\\\\3sem\\\\Programmeringseksamen\\\\Eksamen\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\goo-x\\\\OneDrive\\\\Dokumenter\\\\NetBeansProjects\\\\3sem\\\\Programmeringseksamen\\\\Eksamen\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\goo-x\\\\OneDrive\\\\Dokumenter\\\\NetBeansProjects\\\\3sem\\\\Programmeringseksamen\\\\Eksamen\\\\frontend\\\\src\\\\components\\\\Admin\\\\Directors\\\\AddDirector.js\";\nimport React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\n\nconst AddDirector = props => {\n  const _useState = useState({\n    \"title\": \"\",\n    \"year\": \"\",\n    \"directors\": [{}],\n    \"actors\": [{}],\n    \"genres\": [{}]\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        movie = _useState2[0],\n        setMovie = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        success = _useState6[0],\n        setSuccess = _useState6[1];\n\n  const onChange = evt => {\n    const target = evt.target;\n\n    if (target.tagName === \"SELECT\" && target.id !== \"year\") {\n      const options = evt.target.options;\n      let selected = [];\n\n      for (let i = 0; i < options.length; i++) {\n        if (options[i].selected) {\n          selected.push({\n            \"name\": options[i].value\n          });\n        }\n      }\n\n      movie[target.id] = selected;\n      setMovie(_objectSpread({}, movie));\n    } else {\n      movie[target.id] = target.value;\n      setMovie(_objectSpread({}, movie));\n    }\n  };\n\n  const onClick = evt => {\n    evt.preventDefault();\n\n    if (movie.title === \"\" || movie.year === \"\" || movie.directors.length < 1 || movie.actors.length < 1 || movie.genres.length < 1) {\n      setError(\"You may not leave any fields empty!\");\n    } else {\n      setError(\"\");\n      props.facade.addMovie(movie).then(res => {\n        if (res.hasOwnProperty(\"id\")) setSuccess(true);\n      }).catch(err => console.log(err));\n    }\n  };\n\n  return React.createElement(Form, {\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, error !== \"\" ? React.createElement(Alert, {\n    variant: \"danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, error) : null, React.createElement(Form.Group, {\n    controlId: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"What is the fullname of the director?\"), React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"Eg. Will Smith\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), React.createElement(Form.Group, {\n    controlId: \"about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Form.Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"What is the fullname of the director?\"), React.createElement(Form.Control, {\n    as: \"textarea\",\n    rows: \"3\",\n    placeholder: \"Eg. bla bla bla bla\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), React.createElement(Button, {\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Add director\"), success ? React.createElement(Alert, {\n    variant: \"success\",\n    style: {\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"The movies has been added!\") : null);\n};\n\nexport default AddDirector;","map":{"version":3,"sources":["C:/Users/goo-x/OneDrive/Dokumenter/NetBeansProjects/3sem/Programmeringseksamen/Eksamen/frontend/src/components/Admin/Directors/AddDirector.js"],"names":["React","useState","useEffect","Form","Button","Alert","AddDirector","props","movie","setMovie","error","setError","success","setSuccess","onChange","evt","target","tagName","id","options","selected","i","length","push","value","onClick","preventDefault","title","year","directors","actors","genres","facade","addMovie","then","res","hasOwnProperty","catch","err","console","log","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\n\r\nconst AddDirector = (props) => {\r\n  const [movie, setMovie] = useState({\r\n    \"title\": \"\",\r\n    \"year\": \"\",\r\n    \"directors\": [{}],\r\n    \"actors\": [{}],\r\n    \"genres\": [{}]\r\n  });\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const onChange = evt => {\r\n    const target = evt.target;\r\n    if (target.tagName === \"SELECT\" && target.id !== \"year\") {\r\n      const options = evt.target.options;\r\n      let selected = [];\r\n      for (let i = 0; i < options.length; i++) {\r\n        if (options[i].selected) {\r\n          selected.push({ \"name\": options[i].value })\r\n        }\r\n      }\r\n      movie[target.id] = selected;\r\n      setMovie({ ...movie })\r\n    } else {\r\n      movie[target.id] = target.value;\r\n      setMovie({ ...movie });\r\n    }\r\n  }\r\n\r\n  const onClick = evt => {\r\n    evt.preventDefault();\r\n    if (\r\n      movie.title === \"\" ||\r\n      movie.year === \"\" ||\r\n      movie.directors.length < 1 ||\r\n      movie.actors.length < 1 ||\r\n      movie.genres.length < 1\r\n    ) {\r\n      setError(\"You may not leave any fields empty!\");\r\n    } else {\r\n      setError(\"\");\r\n      props.facade.addMovie(movie)\r\n        .then(res => {\r\n          if (res.hasOwnProperty(\"id\")) setSuccess(true);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <Form onChange={onChange}>\r\n\r\n\r\n\r\n      {\r\n        error !== \"\" ? (\r\n          <Alert variant=\"danger\">{error}</Alert>\r\n        ) : null\r\n      }\r\n\r\n      <Form.Group controlId=\"name\">\r\n        <Form.Label>What is the fullname of the director?</Form.Label>\r\n        <Form.Control type=\"text\" placeholder=\"Eg. Will Smith\" />\r\n      </Form.Group>\r\n\r\n      <Form.Group controlId=\"about\">\r\n        <Form.Label>What is the fullname of the director?</Form.Label>\r\n        <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Eg. bla bla bla bla\" />\r\n      </Form.Group>\r\n\r\n      <Button onClick={onClick}>Add director</Button>\r\n      {\r\n        success ? (\r\n          <Alert variant=\"success\" style={{ marginTop: 10 }}>The movies has been added!</Alert>\r\n        ) : null\r\n      }\r\n\r\n\r\n\r\n    </Form>\r\n\r\n  );\r\n}\r\n\r\nexport default AddDirector;"]},"metadata":{},"sourceType":"module"}